services:
  # MySQL Service
  mysql-service:
    image: mysql:8.0
    container_name: gosqlguard-mysql
    restart: unless-stopped
    # Use default authentication plugin
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: db1
      MYSQL_USER: backup-user
      MYSQL_PASSWORD: test-password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - gosqlguard_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "backup-user", "-ptest-password"]
      interval: 5s
      timeout: 5s
      retries: 5

  # PostgreSQL Service
  postgres-service:
    image: postgres:14
    container_name: gosqlguard-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: backup-user
      POSTGRES_PASSWORD: test-password
      POSTGRES_DB: db1
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gosqlguard_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backup-user"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio
    container_name: gosqlguard-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - gosqlguard_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Create MinIO buckets
  minio-setup:
    image: minio/mc
    container_name: gosqlguard-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      # Configure MinIO client
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      # Create bucket with parents flag
      /usr/bin/mc mb -p myminio/gosqlguard-backups;
      # Set bucket policy
      /usr/bin/mc policy set public myminio/gosqlguard-backups;
      # Add test file to verify bucket is working
      echo 'Test file for GoSQLGuard' > /tmp/test.txt;
      /usr/bin/mc cp /tmp/test.txt myminio/gosqlguard-backups/test.txt;
      echo 'MinIO setup complete with test file';
      exit 0;
      "
    networks:
      - gosqlguard_network

  # GoSQLGuard Service
  gosqlguard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gosqlguard-controller
    restart: unless-stopped
    depends_on:
      mysql-service:
        condition: service_healthy
      postgres-service:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    environment:
      DEBUG: "true"
      CONFIG_PATH: /app/test-config.yaml
      MYSQL_PASSWORD: test-password
      S3_ACCESS_KEY: vuGNTXWipzZrWGNbBLWW
      S3_SECRET_KEY: O3KHT4VIkKcix02xbyZnRtAw2Nqe1jQ94hl6FDY9
      AWS_ACCESS_KEY_ID: vuGNTXWipzZrWGNbBLWW
      AWS_SECRET_ACCESS_KEY: O3KHT4VIkKcix02xbyZnRtAw2Nqe1jQ94hl6FDY9
      AWS_REGION: us-central-1
      S3_ENDPOINT: https://s3.support.tools:9000
      S3_BUCKET: gosqlguard
      S3_USE_SSL: "true"
    volumes:
      - ./test-config.yaml:/app/test-config.yaml
      - gosqlguard_backups:/app/backups
      - gosqlguard_metadata:/app/metadata
    ports:
      - "8888:8080"  # Admin UI
    networks:
      - gosqlguard_network

volumes:
  mysql_data:
  postgres_data:
  minio_data:
  gosqlguard_backups:
  gosqlguard_metadata:

networks:
  gosqlguard_network:
    driver: bridge
