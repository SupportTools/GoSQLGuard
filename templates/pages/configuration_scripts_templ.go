// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func ConfigurationScripts() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t// Global variable to track if we're editing\n\tlet editingServerId = null;\n\tlet editingScheduleName = null;\n\n\t// Server Management Functions\n\tasync function saveServer() {\n\t\tconst form = document.getElementById('server-form');\n\t\tconst databases = document.getElementById('serverDatabases').value\n\t\t\t.split(',')\n\t\t\t.map(db => db.trim())\n\t\t\t.filter(db => db.length > 0);\n\n\t\tconst serverData = {\n\t\t\tname: document.getElementById('serverName').value,\n\t\t\ttype: document.getElementById('serverType').value,\n\t\t\thost: document.getElementById('serverHost').value,\n\t\t\tport: document.getElementById('serverPort').value || '',\n\t\t\tusername: document.getElementById('serverUsername').value,\n\t\t\tpassword: document.getElementById('serverPassword').value,\n\t\t\tinclude_databases: databases\n\t\t};\n\n\t\ttry {\n\t\t\t// First, test the connection\n\t\t\tconst testButton = document.querySelector('#addServerModal .btn-primary');\n\t\t\ttestButton.disabled = true;\n\t\t\ttestButton.innerHTML = '<span class=\"spinner-border spinner-border-sm me-1\"></span> Testing connection...';\n\t\t\t\n\t\t\tconst testResponse = await fetch('/api/servers/test', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(serverData)\n\t\t\t});\n\n\t\t\tif (!testResponse.ok) {\n\t\t\t\tconst error = await testResponse.json();\n\t\t\t\tshowToast('Connection Failed', error.message || 'Unable to connect to database server', 'danger');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Connection successful, now save the server\n\t\t\ttestButton.innerHTML = '<span class=\"spinner-border spinner-border-sm me-1\"></span> Saving...';\n\t\t\t\n\t\t\tconst response = await fetch('/api/servers', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(serverData)\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\t// Close modal and reload page\n\t\t\t\tbootstrap.Modal.getInstance(document.getElementById('addServerModal')).hide();\n\t\t\t\tshowToast('Success', 'Server saved successfully', 'success');\n\t\t\t\tsetTimeout(() => location.reload(), 1000);\n\t\t\t} else {\n\t\t\t\tconst error = await response.json();\n\t\t\t\tshowToast('Error', error.error || 'Failed to save server', 'danger');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Failed to save server: ' + error.message, 'danger');\n\t\t} finally {\n\t\t\tconst testButton = document.querySelector('#addServerModal .btn-primary');\n\t\t\ttestButton.disabled = false;\n\t\t\ttestButton.innerHTML = 'Save Server';\n\t\t}\n\t}\n\n\tasync function deleteServer(serverName) {\n\t\tif (!confirm('Are you sure you want to delete this server?')) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await fetch('/api/servers/delete', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({ name: serverName })\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tshowToast('Success', 'Server deleted successfully', 'success');\n\t\t\t\tsetTimeout(() => location.reload(), 1000);\n\t\t\t} else {\n\t\t\t\tconst error = await response.json();\n\t\t\t\tshowToast('Error', error.error || 'Failed to delete server', 'danger');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Failed to delete server: ' + error.message, 'danger');\n\t\t}\n\t}\n\n\t// Storage Management Functions\n\tasync function saveLocalStorage(event) {\n\t\tevent.preventDefault();\n\n\t\tconst storageData = {\n\t\t\tenabled: document.getElementById('localEnabled').checked,\n\t\t\tbackup_directory: document.getElementById('backupDirectory').value,\n\t\t\torganization_strategy: document.getElementById('localOrgStrategy').value\n\t\t};\n\n\t\ttry {\n\t\t\t// For now, show a message that local storage is configured via YAML\n\t\t\tshowToast('Info', 'Local storage configuration is managed via YAML file', 'info');\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Failed to save: ' + error.message, 'danger');\n\t\t}\n\t}\n\n\tasync function saveS3Storage(event) {\n\t\tevent.preventDefault();\n\n\t\tconst storageData = {\n\t\t\tenabled: document.getElementById('s3Enabled').checked,\n\t\t\tbucket: document.getElementById('s3Bucket').value,\n\t\t\tregion: document.getElementById('s3Region').value,\n\t\t\tendpoint: document.getElementById('s3Endpoint').value,\n\t\t\taccess_key: document.getElementById('s3AccessKey').value,\n\t\t\tsecret_key: document.getElementById('s3SecretKey').value,\n\t\t\tprefix: document.getElementById('s3Prefix').value,\n\t\t\tuse_ssl: document.getElementById('s3UseSSL').checked\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await fetch('/api/s3', {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(storageData)\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tshowToast('Success', 'S3 storage configuration saved', 'success');\n\t\t\t} else {\n\t\t\t\tconst error = await response.json();\n\t\t\t\tshowToast('Error', error.error || 'Failed to save S3 configuration', 'danger');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Failed to save: ' + error.message, 'danger');\n\t\t}\n\t}\n\n\tasync function testS3Connection() {\n\t\tconst button = event.target;\n\t\tbutton.disabled = true;\n\t\tbutton.innerHTML = '<span class=\"spinner-border spinner-border-sm me-1\"></span> Testing...';\n\n\t\ttry {\n\t\t\tconst response = await fetch('/api/s3/test', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tbucket: document.getElementById('s3Bucket').value,\n\t\t\t\t\tregion: document.getElementById('s3Region').value,\n\t\t\t\t\tendpoint: document.getElementById('s3Endpoint').value,\n\t\t\t\t\taccess_key: document.getElementById('s3AccessKey').value,\n\t\t\t\t\tsecret_key: document.getElementById('s3SecretKey').value,\n\t\t\t\t\tuse_ssl: document.getElementById('s3UseSSL').checked\n\t\t\t\t})\n\t\t\t});\n\n\t\t\tconst result = await response.json();\n\t\t\tif (response.ok) {\n\t\t\t\tshowToast('Success', result.message || 'S3 connection test successful', 'success');\n\t\t\t} else {\n\t\t\t\tshowToast('Error', result.error || 'S3 connection test failed', 'danger');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Connection test failed: ' + error.message, 'danger');\n\t\t} finally {\n\t\t\tbutton.disabled = false;\n\t\t\tbutton.innerHTML = '<i data-feather=\"check-circle\"></i> Test Connection';\n\t\t\tfeather.replace();\n\t\t}\n\t}\n\n\t// Schedule Management Functions\n\tasync function saveSchedule() {\n\t\tconst scheduleData = {\n\t\t\tid: editingScheduleName,  // Will be null for new schedules\n\t\t\tname: document.getElementById('scheduleType').value,\n\t\t\tbackupType: document.getElementById('scheduleType').value,\n\t\t\tcronExpression: document.getElementById('scheduleCron').value,\n\t\t\tenabled: true,\n\t\t\tlocalStorage: {\n\t\t\t\tenabled: document.getElementById('localRetentionEnabled').checked,\n\t\t\t\tduration: document.getElementById('localRetentionDuration').value || '24h',\n\t\t\t\tkeepForever: false\n\t\t\t},\n\t\t\ts3Storage: {\n\t\t\t\tenabled: document.getElementById('s3RetentionEnabled').checked,\n\t\t\t\tduration: document.getElementById('s3RetentionDuration').value || '24h',\n\t\t\t\tkeepForever: false\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await fetch('/api/schedules', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(scheduleData)\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tbootstrap.Modal.getInstance(document.getElementById('addScheduleModal')).hide();\n\t\t\t\tshowToast('Success', 'Schedule saved successfully', 'success');\n\t\t\t\tsetTimeout(() => location.reload(), 1000);\n\t\t\t} else {\n\t\t\t\tconst error = await response.json();\n\t\t\t\tshowToast('Error', error.error || 'Failed to save schedule', 'danger');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Failed to save schedule: ' + error.message, 'danger');\n\t\t}\n\t}\n\n\tfunction editSchedule(backupType, schedule) {\n\t\t// Load the schedule data into the modal\n\t\teditingScheduleName = backupType;\n\t\t\n\t\tdocument.getElementById('scheduleType').value = backupType;\n\t\tdocument.getElementById('scheduleCron').value = schedule.Schedule;\n\t\tdocument.getElementById('localRetentionEnabled').checked = schedule.Local.Enabled;\n\t\tdocument.getElementById('localRetentionDuration').value = schedule.Local.Retention.Duration;\n\t\tdocument.getElementById('s3RetentionEnabled').checked = schedule.S3.Enabled;\n\t\tdocument.getElementById('s3RetentionDuration').value = schedule.S3.Retention.Duration;\n\t\t\n\t\t// Update modal title\n\t\tdocument.querySelector('#addScheduleModal .modal-title').textContent = 'Edit Backup Schedule';\n\t\t\n\t\t// Show the modal\n\t\tconst modal = new bootstrap.Modal(document.getElementById('addScheduleModal'));\n\t\tmodal.show();\n\t}\n\n\tasync function deleteSchedule(scheduleName) {\n\t\tif (!confirm('Are you sure you want to delete this schedule?')) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await fetch(`/api/schedules/delete?id=${scheduleName}`, {\n\t\t\t\tmethod: 'POST'\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tshowToast('Success', 'Schedule deleted successfully', 'success');\n\t\t\t\tsetTimeout(() => location.reload(), 1000);\n\t\t\t} else {\n\t\t\t\tconst error = await response.json();\n\t\t\t\tshowToast('Error', error.error || 'Failed to delete schedule', 'danger');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Failed to delete schedule: ' + error.message, 'danger');\n\t\t}\n\t}\n\n\t// MySQL Options Management\n\tasync function showMySQLOptions(serverName) {\n\t\ttry {\n\t\t\tconst url = serverName ? `/api/mysql-options/${serverName}` : '/api/mysql-options';\n\t\t\tconst response = await fetch(url);\n\t\t\t\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error('Failed to fetch MySQL options');\n\t\t\t}\n\n\t\t\tconst options = await response.json();\n\t\t\t\n\t\t\t// Create and show a modal with MySQL options\n\t\t\tconst modalHtml = `\n\t\t\t\t<div class=\"modal fade\" id=\"mysqlOptionsModal\" tabindex=\"-1\">\n\t\t\t\t\t<div class=\"modal-dialog\">\n\t\t\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t\t\t\t<h5 class=\"modal-title\">MySQL Options${serverName ? ' for ' + serverName : ' (Global)'}</h5>\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t\t\t<form id=\"mysql-options-form\">\n\t\t\t\t\t\t\t\t\t<div class=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t<label for=\"mysqlOptions\" class=\"form-label\">Additional mysqldump Options</label>\n\t\t\t\t\t\t\t\t\t\t<textarea class=\"form-control\" id=\"mysqlOptions\" rows=\"3\">${options.additional_options || ''}</textarea>\n\t\t\t\t\t\t\t\t\t\t<small class=\"form-text text-muted\">Enter one option per line (e.g., --single-transaction)</small>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary\" onclick=\"saveMySQLOptions('${serverName || ''}')\">Save Options</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`;\n\n\t\t\t// Remove existing modal if any\n\t\t\tconst existingModal = document.getElementById('mysqlOptionsModal');\n\t\t\tif (existingModal) {\n\t\t\t\texistingModal.remove();\n\t\t\t}\n\n\t\t\t// Add modal to body and show it\n\t\t\tdocument.body.insertAdjacentHTML('beforeend', modalHtml);\n\t\t\tconst modal = new bootstrap.Modal(document.getElementById('mysqlOptionsModal'));\n\t\t\tmodal.show();\n\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Failed to load MySQL options: ' + error.message, 'danger');\n\t\t}\n\t}\n\n\tasync function saveMySQLOptions(serverName) {\n\t\tconst options = document.getElementById('mysqlOptions').value\n\t\t\t.split('\\n')\n\t\t\t.map(opt => opt.trim())\n\t\t\t.filter(opt => opt.length > 0);\n\n\t\ttry {\n\t\t\tconst url = serverName ? `/api/mysql-options/${serverName}` : '/api/mysql-options';\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tadditional_options: options.join(' ')\n\t\t\t\t})\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tbootstrap.Modal.getInstance(document.getElementById('mysqlOptionsModal')).hide();\n\t\t\t\tshowToast('Success', 'MySQL options saved successfully', 'success');\n\t\t\t} else {\n\t\t\t\tconst error = await response.json();\n\t\t\t\tshowToast('Error', error.error || 'Failed to save MySQL options', 'danger');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Failed to save: ' + error.message, 'danger');\n\t\t}\n\t}\n\n\t// PostgreSQL Options Management\n\tasync function showPostgreSQLOptions(serverName) {\n\t\ttry {\n\t\t\tconst url = serverName ? `/api/postgresql-options/${serverName}` : '/api/postgresql-options';\n\t\t\tconst response = await fetch(url);\n\t\t\t\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error('Failed to fetch PostgreSQL options');\n\t\t\t}\n\n\t\t\tconst options = await response.json();\n\t\t\t\n\t\t\t// Create and show a modal with PostgreSQL options\n\t\t\tconst modalHtml = `\n\t\t\t\t<div class=\"modal fade\" id=\"postgresqlOptionsModal\" tabindex=\"-1\">\n\t\t\t\t\t<div class=\"modal-dialog\">\n\t\t\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t\t\t\t<h5 class=\"modal-title\">PostgreSQL Options${serverName ? ' for ' + serverName : ' (Global)'}</h5>\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t\t\t<form id=\"postgresql-options-form\">\n\t\t\t\t\t\t\t\t\t<div class=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t<label for=\"postgresqlOptions\" class=\"form-label\">Additional pg_dump Options</label>\n\t\t\t\t\t\t\t\t\t\t<textarea class=\"form-control\" id=\"postgresqlOptions\" rows=\"3\">${options.additional_options || ''}</textarea>\n\t\t\t\t\t\t\t\t\t\t<small class=\"form-text text-muted\">Enter one option per line (e.g., --verbose)</small>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t<label for=\"postgresqlFormat\" class=\"form-label\">Dump Format</label>\n\t\t\t\t\t\t\t\t\t\t<select class=\"form-select\" id=\"postgresqlFormat\">\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"plain\" ${options.dump_format === 'plain' ? 'selected' : ''}>Plain SQL</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"custom\" ${options.dump_format === 'custom' ? 'selected' : ''}>Custom</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"directory\" ${options.dump_format === 'directory' ? 'selected' : ''}>Directory</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"tar\" ${options.dump_format === 'tar' ? 'selected' : ''}>Tar</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"mb-3\">\n\t\t\t\t\t\t\t\t\t\t<label for=\"postgresqlCompression\" class=\"form-label\">Compression Level (0-9)</label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" id=\"postgresqlCompression\" min=\"0\" max=\"9\" value=\"${options.compression_level || 0}\">\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary\" onclick=\"savePostgreSQLOptions('${serverName || ''}')\">Save Options</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`;\n\n\t\t\t// Remove existing modal if any\n\t\t\tconst existingModal = document.getElementById('postgresqlOptionsModal');\n\t\t\tif (existingModal) {\n\t\t\t\texistingModal.remove();\n\t\t\t}\n\n\t\t\t// Add modal to body and show it\n\t\t\tdocument.body.insertAdjacentHTML('beforeend', modalHtml);\n\t\t\tconst modal = new bootstrap.Modal(document.getElementById('postgresqlOptionsModal'));\n\t\t\tmodal.show();\n\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Failed to load PostgreSQL options: ' + error.message, 'danger');\n\t\t}\n\t}\n\n\tasync function savePostgreSQLOptions(serverName) {\n\t\tconst options = document.getElementById('postgresqlOptions').value\n\t\t\t.split('\\n')\n\t\t\t.map(opt => opt.trim())\n\t\t\t.filter(opt => opt.length > 0);\n\n\t\tconst data = {\n\t\t\tadditional_options: options.join(' '),\n\t\t\tdump_format: document.getElementById('postgresqlFormat').value,\n\t\t\tcompression_level: parseInt(document.getElementById('postgresqlCompression').value)\n\t\t};\n\n\t\ttry {\n\t\t\tconst url = serverName ? `/api/postgresql-options/${serverName}` : '/api/postgresql-options';\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(data)\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tbootstrap.Modal.getInstance(document.getElementById('postgresqlOptionsModal')).hide();\n\t\t\t\tshowToast('Success', 'PostgreSQL options saved successfully', 'success');\n\t\t\t} else {\n\t\t\t\tconst error = await response.json();\n\t\t\t\tshowToast('Error', error.error || 'Failed to save PostgreSQL options', 'danger');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Failed to save: ' + error.message, 'danger');\n\t\t}\n\t}\n\n\t// Test server connection\n\tasync function testServerConnection(server) {\n\t\tconst button = event.target.closest('button');\n\t\tbutton.disabled = true;\n\t\tbutton.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span>';\n\n\t\ttry {\n\t\t\tconst response = await fetch('/api/servers/test', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tname: server.name,\n\t\t\t\t\ttype: server.type,\n\t\t\t\t\thost: server.host,\n\t\t\t\t\tport: server.port || '',\n\t\t\t\t\tusername: server.username,\n\t\t\t\t\tpassword: server.password || ''\n\t\t\t\t})\n\t\t\t});\n\n\t\t\tconst result = await response.json();\n\t\t\tif (response.ok) {\n\t\t\t\tshowToast('Success', result.message || 'Connection successful', 'success');\n\t\t\t} else {\n\t\t\t\tshowToast('Error', result.error || 'Connection failed', 'danger');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tshowToast('Error', 'Connection test failed: ' + error.message, 'danger');\n\t\t} finally {\n\t\t\tbutton.disabled = false;\n\t\t\tbutton.innerHTML = '<i data-feather=\"check-circle\"></i>';\n\t\t\tfeather.replace();\n\t\t}\n\t}\n\n\t// Helper function to show toast notifications\n\tfunction showToast(title, message, type) {\n\t\tconst toastHtml = `\n\t\t\t<div class=\"toast align-items-center text-white bg-${type} border-0\" role=\"alert\">\n\t\t\t\t<div class=\"d-flex\">\n\t\t\t\t\t<div class=\"toast-body\">\n\t\t\t\t\t\t<strong>${title}:</strong> ${message}\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\t\t\n\t\t// Create toast container if it doesn't exist\n\t\tlet toastContainer = document.getElementById('toast-container');\n\t\tif (!toastContainer) {\n\t\t\ttoastContainer = document.createElement('div');\n\t\t\ttoastContainer.id = 'toast-container';\n\t\t\ttoastContainer.className = 'position-fixed bottom-0 end-0 p-3';\n\t\t\ttoastContainer.style.zIndex = '11';\n\t\t\tdocument.body.appendChild(toastContainer);\n\t\t}\n\n\t\ttoastContainer.insertAdjacentHTML('beforeend', toastHtml);\n\t\t\n\t\tconst toastElement = toastContainer.lastElementChild;\n\t\tconst toast = new bootstrap.Toast(toastElement);\n\t\ttoast.show();\n\t\t\n\t\t// Remove toast element after it's hidden\n\t\ttoastElement.addEventListener('hidden.bs.toast', () => {\n\t\t\ttoastElement.remove();\n\t\t});\n\t}\n\n\t// Initialize form handlers when DOM is loaded\n\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t// Local storage form\n\t\tconst localForm = document.getElementById('local-storage-form');\n\t\tif (localForm) {\n\t\t\tlocalForm.addEventListener('submit', saveLocalStorage);\n\t\t}\n\n\t\t// S3 storage form\n\t\tconst s3Form = document.getElementById('s3-storage-form');\n\t\tif (s3Form) {\n\t\t\ts3Form.addEventListener('submit', saveS3Storage);\n\t\t}\n\n\t\t// Load current S3 configuration when page loads\n\t\tloadS3Config();\n\n\t\t// Reset modal forms when closed\n\t\tconst serverModal = document.getElementById('addServerModal');\n\t\tif (serverModal) {\n\t\t\tserverModal.addEventListener('hidden.bs.modal', function () {\n\t\t\t\tdocument.getElementById('server-form').reset();\n\t\t\t\teditingServerId = null;\n\t\t\t});\n\t\t}\n\n\t\tconst scheduleModal = document.getElementById('addScheduleModal');\n\t\tif (scheduleModal) {\n\t\t\tscheduleModal.addEventListener('hidden.bs.modal', function () {\n\t\t\t\tdocument.getElementById('schedule-form').reset();\n\t\t\t\teditingScheduleName = null;\n\t\t\t});\n\t\t}\n\n\t\t// Set default ports when server type changes\n\t\tconst serverTypeSelect = document.getElementById('serverType');\n\t\tif (serverTypeSelect) {\n\t\t\tserverTypeSelect.addEventListener('change', function() {\n\t\t\t\tconst portInput = document.getElementById('serverPort');\n\t\t\t\tif (this.value === 'mysql') {\n\t\t\t\t\tportInput.value = '3306';\n\t\t\t\t} else if (this.value === 'postgresql') {\n\t\t\t\t\tportInput.value = '5432';\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\t// Load current S3 configuration\n\tasync function loadS3Config() {\n\t\ttry {\n\t\t\tconst response = await fetch('/api/s3');\n\t\t\tif (response.ok) {\n\t\t\t\tconst config = await response.json();\n\t\t\t\t\n\t\t\t\t// Update form fields with current values\n\t\t\t\tdocument.getElementById('s3Enabled').checked = config.enabled;\n\t\t\t\tdocument.getElementById('s3Bucket').value = config.bucket || '';\n\t\t\t\tdocument.getElementById('s3Region').value = config.region || '';\n\t\t\t\tdocument.getElementById('s3Endpoint').value = config.endpoint || '';\n\t\t\t\tdocument.getElementById('s3AccessKey').value = config.access_key || '';\n\t\t\t\tdocument.getElementById('s3SecretKey').value = config.secret_key || '';\n\t\t\t\tdocument.getElementById('s3Prefix').value = config.prefix || '';\n\t\t\t\tdocument.getElementById('s3UseSSL').checked = config.use_ssl !== false;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to load S3 configuration:', error);\n\t\t}\n\t}\n\n\t// Convert cron expression to human readable format\n\tfunction cronToHuman(cron) {\n\t\t// Simple conversion for common patterns\n\t\tconst patterns = {\n\t\t\t'0 * * * *': 'Every hour',\n\t\t\t'0 0 * * *': 'Daily at midnight',\n\t\t\t'0 2 * * *': 'Daily at 2:00 AM',\n\t\t\t'0 3 * * 0': 'Weekly on Sunday at 3:00 AM',\n\t\t\t'0 0 * * 0': 'Weekly on Sunday at midnight',\n\t\t\t'0 0 1 * *': 'Monthly on the 1st at midnight'\n\t\t};\n\t\t\n\t\treturn patterns[cron] || cron;\n\t}\n\n\t// Validate cron expression\n\tfunction validateCron(cron) {\n\t\tconst parts = cron.split(' ');\n\t\tif (parts.length !== 5) {\n\t\t\treturn false;\n\t\t}\n\t\t// Basic validation - could be enhanced\n\t\treturn true;\n\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
