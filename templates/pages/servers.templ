package pages

import (
	"fmt"
	"github.com/supporttools/GoSQLGuard/templates/types"
	"github.com/supporttools/GoSQLGuard/templates/layouts"
	"github.com/supporttools/GoSQLGuard/pkg/config"
)

// ServersPageData holds data for the servers page
type ServersPageData struct {
	Servers []config.DatabaseServerConfig
	BackupStats map[string]ServerBackupStats
}

// ServerBackupStats holds backup statistics for a server
type ServerBackupStats struct {
	TotalBackups int
	LastBackup   string
	TotalSize    uint64
	Databases    []string
}

templ ServersPage(data types.PageData, serversData ServersPageData) {
	@layouts.Base(data) {
		<div class="row mb-4">
			<div class="col-12">
				<div class="card">
					<div class="card-header d-flex justify-content-between align-items-center">
						<span><i data-feather="server"></i> Configured Servers</span>
						<span class="text-muted small">Total: { fmt.Sprintf("%d", len(serversData.Servers)) } servers</span>
					</div>
					<div class="card-body">
						if len(serversData.Servers) > 0 {
							<div class="table-responsive">
								<table class="table table-striped table-hover">
									<thead>
										<tr>
											<th>Name</th>
											<th>Type</th>
											<th>Host</th>
											<th>Port</th>
											<th>Databases</th>
											<th>Total Backups</th>
											<th>Last Backup</th>
											<th>Actions</th>
										</tr>
									</thead>
									<tbody>
										for _, server := range serversData.Servers {
											<tr>
												<td>
													<strong>{ server.Name }</strong>
												</td>
												<td>
													<span class="badge bg-secondary">{ server.Type }</span>
												</td>
												<td>{ server.Host }</td>
												<td>{ server.Port }</td>
												<td>
													if stats, ok := serversData.BackupStats[server.Name]; ok {
														for i, db := range stats.Databases {
															<span class="badge bg-info">{ db }</span>
															if i < len(stats.Databases)-1 {
																{ " " }
															}
														}
													} else {
														<span class="text-muted">No backups yet</span>
													}
												</td>
												<td>
													if stats, ok := serversData.BackupStats[server.Name]; ok {
														{ fmt.Sprintf("%d", stats.TotalBackups) }
													} else {
														<span class="text-muted">0</span>
													}
												</td>
												<td>
													if stats, ok := serversData.BackupStats[server.Name]; ok && stats.LastBackup != "" {
														{ stats.LastBackup }
													} else {
														<span class="text-muted">Never</span>
													}
												</td>
												<td>
													<a href={ templ.SafeURL(fmt.Sprintf("/databases?server=%s", server.Name)) } 
														class="btn btn-sm btn-outline-primary" title="View Databases">
														<i data-feather="database"></i>
													</a>
													<a href={ templ.SafeURL(fmt.Sprintf("/status/backups?server=%s", server.Name)) } 
														class="btn btn-sm btn-outline-secondary" title="View Backups">
														<i data-feather="list"></i>
													</a>
												</td>
											</tr>
										}
									</tbody>
								</table>
							</div>
						} else {
							<p class="text-muted">No servers configured. Go to the Configuration page to add servers.</p>
						}
					</div>
				</div>
			</div>
		</div>

		// Server Details Cards
		if len(serversData.Servers) > 0 {
			<div class="row">
				for _, server := range serversData.Servers {
					<div class="col-md-6 mb-4">
						<div class="card">
							<div class="card-header">
								<h5 class="mb-0">
									<i data-feather="server"></i> { server.Name }
									<span class="badge bg-secondary ms-2">{ server.Type }</span>
								</h5>
							</div>
							<div class="card-body">
								<dl class="row">
									<dt class="col-sm-4">Connection:</dt>
									<dd class="col-sm-8">{ server.Host }:{ server.Port }</dd>
									
									<dt class="col-sm-4">Username:</dt>
									<dd class="col-sm-8">{ server.Username }</dd>
									
									<dt class="col-sm-4">Databases:</dt>
									<dd class="col-sm-8">
										if len(server.IncludeDatabases) > 0 {
											for i, db := range server.IncludeDatabases {
												<span class="badge bg-info">{ db }</span>
												if i < len(server.IncludeDatabases)-1 {
													{ " " }
												}
											}
										} else if len(server.ExcludeDatabases) > 0 {
											<span class="text-muted">All except: </span>
											for i, db := range server.ExcludeDatabases {
												<span class="badge bg-warning">{ db }</span>
												if i < len(server.ExcludeDatabases)-1 {
													{ " " }
												}
											}
										} else {
											<span class="text-muted">All databases</span>
										}
									</dd>
									
									if stats, ok := serversData.BackupStats[server.Name]; ok {
										<dt class="col-sm-4">Total Backups:</dt>
										<dd class="col-sm-8">{ fmt.Sprintf("%d", stats.TotalBackups) }</dd>
										
										<dt class="col-sm-4">Last Backup:</dt>
										<dd class="col-sm-8">{ stats.LastBackup }</dd>
									}
								</dl>
								
								<div class="mt-3">
									<a href={ templ.SafeURL(fmt.Sprintf("/databases?server=%s", server.Name)) } 
										class="btn btn-sm btn-primary">
										<i data-feather="database"></i> View Databases
									</a>
									<a href={ templ.SafeURL(fmt.Sprintf("/status/backups?server=%s", server.Name)) } 
										class="btn btn-sm btn-secondary ms-2">
										<i data-feather="list"></i> View Backups
									</a>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		}
	}
}